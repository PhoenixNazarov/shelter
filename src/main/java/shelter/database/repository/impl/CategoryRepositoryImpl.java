package shelter.database.repository.impl;

import shelter.database.exception.RepositoryException;
import shelter.database.models.Animal;
import shelter.database.models.Category;
import shelter.database.repository.AnimalRepository;
import shelter.database.repository.CategoryRepository;
import shelter.database.util.DatabaseConnection;

import javax.sql.DataSource;
import java.io.Console;
import java.sql.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

public class CategoryRepositoryImpl implements CategoryRepository {
    @Override
    public void save(Category category) {
        Connection connection = DatabaseConnection.getConnection();
        try (PreparedStatement statement = connection.prepareStatement("INSERT INTO `Category` (`name`, `timeCreate`) VALUES (?, datetime('now'))", Statement.RETURN_GENERATED_KEYS)) {
            statement.setString(1, category.getName());
            if (statement.executeUpdate() != 1) {
                throw new RepositoryException("Can't save Category.");
            } else {
                ResultSet generatedKeys = statement.getGeneratedKeys();
                if (generatedKeys.next()) {
                    category.setId(generatedKeys.getInt(1));
//                    category.setTimeCreate(find(user.getId()).getCreationTime());
                } else {
                    throw new RepositoryException("Can't save Category [no autogenerated fields].");
                }
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public Category find(Integer id) {
        Connection connection = DatabaseConnection.getConnection();
        try (PreparedStatement statement = connection.prepareStatement("SELECT * FROM Category WHERE id=?"))
        {
            statement.setInt(1, id);
            try (ResultSet resultSet = statement.executeQuery()) {
                return toCategory(statement.getMetaData(), resultSet);
            }
        } catch (SQLException | ParseException e) {
            throw new RuntimeException("Can't find Category.", e);
        }
    }

    @Override
    public Category find(String name) {
        Connection connection = DatabaseConnection.getConnection();
        try (PreparedStatement statement = connection.prepareStatement("SELECT * FROM Category WHERE name=?"))
        {
            statement.setString(1, name);
            try (ResultSet resultSet = statement.executeQuery()) {
                return toCategory(statement.getMetaData(), resultSet);
            }
        } catch (SQLException | ParseException e) {
            throw new RuntimeException("Can't find Category.", e);
        }
    }

    @Override
    public List<Category> findAll() {
        List<Category> categories = new ArrayList<>();
        Connection connection = DatabaseConnection.getConnection();
        try (PreparedStatement statement = connection.prepareStatement("SELECT * FROM Category")) {
            try (ResultSet resultSet = statement.executeQuery()) {
                Category category;
                while ((category = toCategory(statement.getMetaData(), resultSet)) != null) {
                    categories.add(category);
                }
            }
        } catch (SQLException | ParseException e) {
            throw new RuntimeException("Can't find Category.", e);
        }

        return categories;
    }

    @Override
    public void delete(Integer id) {
        Connection connection = DatabaseConnection.getConnection();
        try (PreparedStatement statement = connection.prepareStatement("DELETE FROM main.Category where id=?"))
        {
            statement.setInt(1, id);
            statement.execute();
        } catch (SQLException e) {
            throw new RuntimeException("Can't delete Category.", e);
        }
    }

    private Category toCategory(ResultSetMetaData metaData, ResultSet resultSet) throws SQLException, ParseException {
        if (!resultSet.next()) {
            return null;
        }
        SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss", Locale.ENGLISH);
        Category category = new Category();
        for (int i = 1; i <= metaData.getColumnCount(); i++) {
            switch (metaData.getColumnName(i)) {
                case "id" -> category.setId(resultSet.getInt(i));
                case "name" -> category.setName(resultSet.getString(i));
                case "timeCreate" -> category.setTimeCreate(formatter.parse(resultSet.getString(i)));
                default -> {
                }
            }
        }

        return category;
    }

}
