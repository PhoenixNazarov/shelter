package shelter.database.repository.impl;

import shelter.database.exception.RepositoryException;
import shelter.database.models.Category;
import shelter.database.models.Place;
import shelter.database.repository.CategoryRepository;
import shelter.database.repository.PlaceRepository;
import shelter.database.util.DatabaseConnection;

import java.sql.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Locale;

public class PlaceRepositoryImpl implements PlaceRepository {
    @Override
    public void save(Place place) {
        Connection connection = DatabaseConnection.getConnection();
        try (PreparedStatement statement = connection.prepareStatement("INSERT INTO `Place` (`number`, `description`, `maxAnimal`, `timeCreate`) VALUES (?, ?, ?, datetime('now'))", Statement.RETURN_GENERATED_KEYS)) {
            statement.setInt(1, place.getNumber());
            statement.setString(2, place.getDescription());
            statement.setInt(3, place.getMaxAnimal());

            if (statement.executeUpdate() != 1) {
                throw new RepositoryException("Can't save Place.");
            } else {
                ResultSet generatedKeys = statement.getGeneratedKeys();
                if (generatedKeys.next()) {
                    place.setId(generatedKeys.getInt(1));
//                    category.setTimeCreate(find(user.getId()).getCreationTime());
                } else {
                    throw new RepositoryException("Can't save Place [no autogenerated fields].");
                }
            }
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    @Override
    public List<Place> findAll() {
        List<Place> places = new ArrayList<>();
        Connection connection = DatabaseConnection.getConnection();
        try (PreparedStatement statement = connection.prepareStatement("SELECT * FROM Place")) {
            try (ResultSet resultSet = statement.executeQuery()) {
                Place place;
                while ((place = toPlace(statement.getMetaData(), resultSet)) != null) {
                    places.add(place);
                }
            }
        } catch (SQLException | ParseException e) {
            throw new RuntimeException("Can't find Places.", e);
        }

        return places;
    }

    @Override
    public Place findById(Integer id) {
        Connection connection = DatabaseConnection.getConnection();
        try (PreparedStatement statement = connection.prepareStatement("SELECT * FROM Place WHERE id=?")) {
            statement.setInt(1, id);
            try (ResultSet resultSet = statement.executeQuery()) {
                return toPlace(statement.getMetaData(), resultSet);
            }
        } catch (SQLException | ParseException e) {
            throw new RuntimeException("Can't find Category.", e);
        }
    }


    @Override
    public void delete(Integer id) {
        Connection connection = DatabaseConnection.getConnection();
        try (PreparedStatement statement = connection.prepareStatement("DELETE FROM main.Place where id=?")) {
            statement.setInt(1, id);
            statement.execute();
        } catch (SQLException e) {
            throw new RuntimeException("Can't delete Place.", e);
        }
    }

    private Place toPlace(ResultSetMetaData metaData, ResultSet resultSet) throws SQLException, ParseException {
        if (!resultSet.next()) {
            return null;
        }
        SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss", Locale.ENGLISH);
        Place place = new Place();
        for (int i = 1; i <= metaData.getColumnCount(); i++) {
            switch (metaData.getColumnName(i)) {
                case "id" -> place.setId(resultSet.getInt(i));
                case "timeCreate" -> place.setTimeCreate(formatter.parse(resultSet.getString(i)));
                case "number" -> place.setNumber(resultSet.getInt(i));
                case "description" -> place.setDescription(resultSet.getString(i));
                case "maxAnimal" -> place.setMaxAnimal(resultSet.getInt(i));

                default -> {
                }
            }
        }

        return place;
    }


}
